using FacebookCommunityAnalytics.Api.Core.Enums;
using System;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;
using Volo.Abp.Domain.Repositories;

namespace FacebookCommunityAnalytics.Api.Posts
{
    public interface IPostRepository : IRepository<Post, Guid>
    {
        Task<PostWithNavigationProperties> GetWithNavigationPropertiesAsync(
            Guid id,
            CancellationToken cancellationToken = default
        );

        Task<List<PostWithNavigationProperties>> GetListWithNavigationPropertiesAsync(
            string filterText = null,
            PostContentType? postContentType = null,
            PostCopyrightType? postCopyrightType = null,
            string url = null,
            string shortUrl = null,
            int? likeCountMin = null,
            int? likeCountMax = null,
            int? commentCountMin = null,
            int? commentCountMax = null,
            int? shareCountMin = null,
            int? shareCountMax = null,
            int? totalCountMin = null,
            int? totalCountMax = null,
            string hashtag = null,
            string fid = null,
            bool? isNotAvailable = null,
            PostStatus? status = null,
            PostSourceType? postSourceType = null,
            string note = null,
            DateTime? createdDateTimeMin = null,
            DateTime? createdDateTimeMax = null,
            DateTime? lastCrawledDateTimeMin = null,
            DateTime? lastCrawledDateTimeMax = null,
            DateTime? submissionDateTimeMin = null,
            DateTime? submissionDateTimeMax = null,
            Guid? categoryId = null,
            Guid? groupId = null,
            Guid? appUserId = null,
            Guid? campaignId = null,
            Guid? partnerId = null,
            string sorting = null,
            int maxResultCount = int.MaxValue,
            int skipCount = 0,
            CancellationToken cancellationToken = default
        );

        Task<List<Post>> GetListAsync(
            string filterText = null,
            PostContentType? postContentType = null,
            PostCopyrightType? postCopyrightType = null,
            string url = null,
            string shortUrl = null,
            int? likeCountMin = null,
            int? likeCountMax = null,
            int? commentCountMin = null,
            int? commentCountMax = null,
            int? shareCountMin = null,
            int? shareCountMax = null,
            int? totalCountMin = null,
            int? totalCountMax = null,
            string hashtag = null,
            string fid = null,
            bool? isNotAvailable = null,
            PostStatus? status = null,
            PostSourceType? postSourceType = null,
            string note = null,
            DateTime? createdDateTimeMin = null,
            DateTime? createdDateTimeMax = null,
            DateTime? lastCrawledDateTimeMin = null,
            DateTime? lastCrawledDateTimeMax = null,
            DateTime? submissionDateTimeMin = null,
            DateTime? submissionDateTimeMax = null,
            string sorting = null,
            int maxResultCount = int.MaxValue,
            int skipCount = 0,
            CancellationToken cancellationToken = default
        );

        Task<long> GetCountAsync(
            string filterText = null,
            PostContentType? postContentType = null,
            PostCopyrightType? postCopyrightType = null,
            string url = null,
            string shortUrl = null,
            int? likeCountMin = null,
            int? likeCountMax = null,
            int? commentCountMin = null,
            int? commentCountMax = null,
            int? shareCountMin = null,
            int? shareCountMax = null,
            int? totalCountMin = null,
            int? totalCountMax = null,
            string hashtag = null,
            string fid = null,
            bool? isNotAvailable = null,
            PostStatus? status = null,
            PostSourceType? postSourceType = null,
            string note = null,
            DateTime? createdDateTimeMin = null,
            DateTime? createdDateTimeMax = null,
            DateTime? lastCrawledDateTimeMin = null,
            DateTime? lastCrawledDateTimeMax = null,
            DateTime? submissionDateTimeMin = null,
            DateTime? submissionDateTimeMax = null,
            Guid? categoryId = null,
            Guid? groupId = null,
            Guid? appUserId = null,
            Guid? campaignId = null,
            Guid? partnerId = null,
            CancellationToken cancellationToken = default);

        Task<long> GetCountExtendAsync(
            string filterText = null,
            PostContentType? postContentType = null,
            PostCopyrightType? postCopyrightType = null,
            string url = null,
            string shortUrl = null,
            int? likeCountMin = null,
            int? likeCountMax = null,
            int? commentCountMin = null,
            int? commentCountMax = null,
            int? shareCountMin = null,
            int? shareCountMax = null,
            int? totalCountMin = null,
            int? totalCountMax = null,
            string hashtag = null,
            string fid = null,
            bool? isNotAvailable = null,
            bool? isValid = null,
            PostStatus? status = null,
            PostSourceType? postSourceType = null,
            string note = null,
            int? clientOffsetInMinutes = null,
            DateTime? createdDateTimeMin = null,
            DateTime? createdDateTimeMax = null,
            DateTime? lastCrawledDateTimeMin = null,
            DateTime? lastCrawledDateTimeMax = null,
            DateTime? submissionDateTimeMin = null,
            DateTime? submissionDateTimeMax = null,
            Guid? categoryId = null,
            Guid? groupId = null,
            Guid? appUserId = null,
            Guid? campaignId = null,
            Guid? partnerId = null,
            IEnumerable<Guid> appUserIds = null,
            IEnumerable<Guid> groupIds = null,
            IEnumerable<Guid> campaignIds = null,
            IEnumerable<PostSourceType> postSourceTypes = null,
            CancellationToken cancellationToken = default);

        Task<List<PostWithNavigationProperties>> GetListWithNavigationPropertiesExtendAsync(
            string filterText = null,
            PostContentType? postContentType = null,
            PostCopyrightType? postCopyrightType = null,
            string url = null,
            string shortUrl = null,
            int? likeCountMin = null,
            int? likeCountMax = null,
            int? commentCountMin = null,
            int? commentCountMax = null,
            int? shareCountMin = null,
            int? shareCountMax = null,
            int? totalCountMin = null,
            int? totalCountMax = null,
            string hashtag = null,
            string fid = null,
            bool? isNotAvailable = null,
            bool? isValid = null,
            PostStatus? status = null,
            PostSourceType? postSourceType = null,
            string note = null,
            int? clientOffsetInMinutes = null,
            DateTime? createdDateTimeMin = null,
            DateTime? createdDateTimeMax = null,
            DateTime? lastCrawledDateTimeMin = null,
            DateTime? lastCrawledDateTimeMax = null,
            DateTime? submissionDateTimeMin = null,
            DateTime? submissionDateTimeMax = null,
            Guid? categoryId = null,
            Guid? groupId = null,
            Guid? appUserId = null,
            Guid? campaignId = null,
            Guid? partnerId = null,
            IEnumerable<Guid> appUserIds = null,
            IEnumerable<Guid> groupIds = null,
            IEnumerable<Guid> campaignIds = null,
            IEnumerable<PostSourceType> postSourceTypes = null,
            string sorting = null,
            int maxResultCount = int.MaxValue,
            int skipCount = 0,
            CancellationToken cancellationToken = default);

        Task<List<Post>> GetAsync(IEnumerable<string> urls);
        Task<List<Post>> GetUncrawledPosts(int intervalHours, DateTime fromDateTime, DateTime? toDateTime);
        Task<List<Post>> GetNotAvailablePosts(int intervalHours, DateTime fromDateTime, DateTime? toDateTime);

        Task<List<PostWithNavigationProperties>> GetPostsByEvaluationAsync(Guid appUserId, int month, int year, CancellationToken cancellationToken = default);

        Task<List<Post>> GetChartPosts(Guid? groupId = null,
            DateTime? startDateTime = null,
            DateTime? endDateTime = null,
            PostContentType? postContentType = null,
            IEnumerable<Guid?> groupIds = null,
            CancellationToken cancellationToken = default);

        Task<List<Post>> GetListExtendAsync(
            string filterText = null,
            PostContentType? postContentType = null,
            PostCopyrightType? postCopyrightType = null,
            string url = null,
            string shortUrl = null,
            int? likeCountMin = null,
            int? likeCountMax = null,
            int? commentCountMin = null,
            int? commentCountMax = null,
            int? shareCountMin = null,
            int? shareCountMax = null,
            int? totalCountMin = null,
            int? totalCountMax = null,
            string hashtag = null,
            string fid = null,
            bool? isNotAvailable = null,
            bool? isValid = null,
            PostStatus? status = null,
            PostSourceType? postSourceType = null,
            string note = null,
            DateTime? createdDateTimeMin = null,
            DateTime? createdDateTimeMax = null,
            DateTime? lastCrawledDateTimeMin = null,
            DateTime? lastCrawledDateTimeMax = null,
            DateTime? submissionDateTimeMin = null,
            DateTime? submissionDateTimeMax = null,
            Guid? categoryId = null,
            Guid? groupId = null,
            Guid? appUserId = null,
            Guid? campaignId = null,
            Guid? partnerId = null,
            IEnumerable<Guid> appUserIds = null,
            IEnumerable<Guid> groupIds = null,
            IEnumerable<Guid> campaignIds = null,
            string sorting = null,
            int maxResultCount = int.MaxValue,
            int skipCount = 0,
            CancellationToken cancellationToken = default
        );
        
    }
}