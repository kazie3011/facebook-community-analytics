@page "/"
@namespace FacebookCommunityAnalytics.Api.Blazor.Pages
@using System.Globalization
@using FacebookCommunityAnalytics.Api.Blazor.Shared
@using Volo.Abp.AspNetCore.Components.Server.LeptonTheme.Bundling
@using Volo.Abp.AspNetCore.Components.Web.LeptonTheme.Components
@using Volo.Abp.Localization
@{
    Layout = null;
    var rtl = CultureHelper.IsRtl ? "rtl" : string.Empty;
}

<!DOCTYPE html>
<html lang="@CultureInfo.CurrentCulture.Name" dir="@rtl">
<head>
    <meta charset="utf-8"/>
    @*TODO: Logo Config*@
    <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
    <link rel="manifest" href="/manifest.json">
    <link rel="shortcut icon" type="image/png" href="\images\logo\logo-dark.png"/>
    <title>GDL - Tracking Tool</title>
    <base href="~/"/>
    
    <abp-style-bundle name="@BlazorLeptonThemeBundles.Styles.Global"/>
    <link rel="stylesheet" href="_content/Radzen.Blazor/css/default-base.css">
    <script src="_content/BlazorDateRangePicker/clickAndPositionHandler.js"></script>
    <link rel="stylesheet" href="_content/BlazorDateRangePicker/daterangepicker.min.css"/>
    <link href="libs/jqwidgets/styles/jqx.base.css" rel="stylesheet"/>
    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v5.15.4/css/all.css" />

</head>
<body class="abp-application-layout @rtl">
<component type="typeof(App)" render-mode="Server"/>

<div id="blazor-error-ui">
    <environment include="Staging,Production">
        An error has occurred. This application may no longer respond until reloaded.
    </environment>
    <environment include="Development">
        An unhandled exception has occurred. See browser dev tools for details.
    </environment>
    <a href="" class="reload">Reload</a>
    <a class="dismiss">🗙</a>
</div>
<component type="typeof(SignalRNotification)" render-mode="ServerPrerendered"/>

<abp-script-bundle name="@BlazorLeptonThemeBundles.Scripts.Global"/>
<script src="~/libs/jquery/jquery.js"></script>
<!--Chart blazorise-->
<!--<script src="https://cdn.jsdelivr.net/npm/chart.js@2.8.0"></script>-->
<script src="https://cdn.jsdelivr.net/npm/chart.js@2.9.4/dist/Chart.min.js"></script>
<script src="_content/Blazorise.Charts/blazorise.charts.js"></script>

<script src="_content/Blazorise.RichTextEdit/blazorise.richtextedit.js"></script>
<script src="_content/Radzen.Blazor/Radzen.Blazor.js"></script>

<!-- This is the glue between Blazor and Chart.js -->
<script src="_content/ChartJs.Blazor.Fork/ChartJsBlazorInterop.js"></script>
<script src="//cdn.jsdelivr.net/npm/chartjs-plugin-datalabels"></script>
<script src="https://unpkg.com/chartjs-plugin-datalabels@0.7.0/dist/chartjs-plugin-datalabels.min.js"></script>
<script src="~/scripts/global.js"></script>

<!--this is for pivot table-->
<script type="text/javascript" src="libs/jqwidgets/jqxcore.js"></script>
<script type="text/javascript" src="libs/jqwidgets/jqxdata.js"></script>
<script type="text/javascript" src="libs/jqwidgets/jqxbuttons.js"></script>
<script type="text/javascript" src="libs/jqwidgets/jqxscrollbar.js"></script>
<script type="text/javascript" src="libs/jqwidgets/jqxmenu.js"></script>
<script type="text/javascript" src="libs/jqwidgets/jqxpivot.js"></script>
<script type="text/javascript" src="libs/jqwidgets/jqxpivotgrid.js"></script>

<script src="~/scripts/createTiktokWeeklyReportGrid.js"></script>

<script src="https://cdnjs.cloudflare.com/ajax/libs/clipboard.js/2.0.8/clipboard.min.js"></script>
<script>
            function customTooltips(tooltipModel) {
                            // Tooltip Element
                            var tooltipEl = document.getElementById('chartjs-tooltip');
            
                            // Create element on first render
                            if (!tooltipEl) {
                                tooltipEl = document.createElement('div');
                                tooltipEl.id = 'chartjs-tooltip';
                                tooltipEl.innerHTML = '<table style="background-color: #282c34 !important; opacity: 0.9; color:#fff !important; border-radius: 9px; "></table>';
                                document.body.appendChild(tooltipEl);
                            }
            
                            // Hide if no tooltip
                            if (tooltipModel.opacity === 0) {
                                tooltipEl.style.opacity = 0;
                                return;
                            }
            
                            // Set caret Position
                            tooltipEl.classList.remove('above', 'below', 'no-transform');
                            if (tooltipModel.yAlign) {
                                tooltipEl.classList.add(tooltipModel.yAlign);
                            } else {
                                tooltipEl.classList.add('no-transform');
                            }
            
                            function getBody(bodyItem) {
                                return bodyItem.lines;
                            }
            
                            // Set Text
                            if (tooltipModel.body) {
                                var titleLines = tooltipModel.title || [];
                                var bodyLines = tooltipModel.body.map(getBody);
            
                                var innerHtml = '<thead>';
            
                                titleLines.forEach(function(title) {
                                    innerHtml += '<tr><th><span style="margin-left: 5px">' + title + '</span></th></tr>';
                                });
                                innerHtml += '</thead><tbody>';
            
                                bodyLines.forEach(function(body, i) {
                                    var colors = tooltipModel.labelColors[i];
                                    var style = 'background:' + colors.backgroundColor;
                                    style += '; border-color:' + colors.borderColor;
                                    style += '; border-width: 2px;margin-right: 5px;margin-left: 5px;width: 10px !important; border-width: 10px;height: 10px;display: inline-block;';
                                    var span = '<span style="' + style + '"></span>';
                                    innerHtml += '<tr><td>' + span + body + '</td></tr>';
                                });
                                innerHtml += '</tbody>';
            
                                var tableRoot = tooltipEl.querySelector('table');
                                tableRoot.innerHTML = innerHtml; 
                            }
            
                            // `this` will be the overall tooltip
                            var position = this._chart.canvas.getBoundingClientRect();
            
                            // Display, position, and set styles for font
                            
                            tooltipEl.style.opacity = '1';
                            tooltipEl.style.position = 'absolute';
                            tooltipEl.style.left = position.left + window.pageXOffset + tooltipModel.caretX + 'px';
                            tooltipEl.style.top = position.top + window.pageYOffset + tooltipModel.caretY + 'px';
                            tooltipEl.style.fontFamily = tooltipModel._bodyFontFamily;
                            tooltipEl.style.fontSize = tooltipModel.bodyFontSize + 'px';
                            tooltipEl.style.fontStyle = tooltipModel._bodyFontStyle;
                            tooltipEl.style.padding = tooltipModel.yPadding + 'px ' + tooltipModel.xPadding + 'px';
                            tooltipEl.style.pointerEvents = 'none';
                            tooltipEl.style.zIndex = '1111';
                            tooltipEl.style.transform = 'translate(-50%, 0)';
                            tooltipEl.style.transition = 'all .1s ease';                            
                        }
           function RedirectToLoginPage(){
                window.location.href = "Account/Login";    
           }
           function HiddenMenuOnMobile(){
                 $(".lp-sidebar-navi li a[href!='#']").click(function(){             
                 $("#navbarSidebar").removeClass("show");               
                 });              
           }
           function nFormatter(num, digits) {
             const lookup = [
               { value: 1, symbol: "" },
               // { value: 1e3, symbol: "k" },
               { value: 1e6, symbol: "M" },
               { value: 1e9, symbol: "B" },
               { value: 1e12, symbol: "T" },
             ];
             const rx = /\.0+$|(\.[0-9]*[1-9])0+$/;
             let item = lookup.slice().reverse().find(function(item) {
               return num >= item.value;
             });
             return item ? (num / item.value).toFixed(digits).replace(rx, "$1") + item.symbol : "0";
           }
            window.generalInterop = {
                customAxisLabel : function (value, index, ticks) {
                    return nFormatter(value, 1);
                   },
                datalabelsConfig: function (canvasID, horizontal, setpostion = true, isHideLabel = false, customLabels = [], hideLabelDatasetIndex = [], sortTooltip = false, customToolTips = []) {
                        let chart = window.ChartJsInterop.BlazorCharts.get(canvasID);
                        if (setpostion){
                            if (horizontal) {
                                   chart.options.plugins.datalabels.align = 'right';
                                   chart.options.plugins.datalabels.anchor = 'end';
                                   chart.options.plugins.datalabels.clamp = true;
                                   chart.options.plugins.datalabels.font.weight = 'bold';
                               } else {
                                   chart.options.plugins.datalabels.align = 'end';
                                   chart.options.plugins.datalabels.anchor = 'end';
                                   chart.options.plugins.datalabels.clamp = true;
                                   chart.options.plugins.datalabels.font.weight = 'bold';
                                   chart.options.plugins.datalabels.rotation = -90;                
                            }
                        }else {
                             chart.options.plugins.datalabels.align = 'start';
                             chart.options.plugins.datalabels.anchor = 'end';
                             chart.options.plugins.datalabels.clamp = true;
                             chart.options.plugins.datalabels.font.weight = 'bold';
                             //chart.options.plugins.datalabels.color = 'white';
                             //chart.options.plugins.datalabels.font.weight = 'bold';
                             //chart.options.plugins.datalabels.rotation = -90;  
                        }
                        //Tooltip decimal separator
                        if (sortTooltip){
                            chart.options.tooltips.itemSort = function(a, b) 
                                {
                                    return b.value - a.value
                                }
                            
                        chart.options.tooltips.enabled = false;
                        chart.options.tooltips.custom = customTooltips;
                        }
                        
                        // chart.options.tooltips.caretX = 0;
                        // chart.options.tooltips.caretY = 0;
                        //chart.options.tooltips.yAlign = 'top';
                        chart.options.tooltips.callbacks.label = function (tooltipItem, data) {
                            let dataset = data.datasets[tooltipItem.datasetIndex];
                            if(customToolTips !== null && customToolTips.length > 0){
                                if(dataset.label !== undefined){
                                    return dataset.label + ': ' + customToolTips[tooltipItem.index];
                                }else {
                                    return data.labels[tooltipItem.index] + ': ' + customToolTips[tooltipItem.index];
                                }                                
                            }
                            else{
                                if(dataset.label !== undefined){
                                     if (customLabels !== null && customLabels.length > 0){
                                          // data.datasets.forEach(e => label += e.label + ': ' + nFormatter(customLabels[tooltipItem.index], 1) + '\n')
                                          // return label;
                                          return dataset.label + ': ' + nFormatter(customLabels[tooltipItem.index], 1);
                                     }
                                          // return formatted string here
                                          // data.datasets.forEach(e => label += e.label + ': ' + nFormatter(e.data[tooltipItem.index], 1) + '\n')
                                          // return label;
                                          return dataset.label + ': ' + nFormatter(Number(dataset.data[tooltipItem.index]), 1);
                                }else {
                                     if (customLabels !== null && customLabels.length > 0){
                                          return data.labels[tooltipItem.index] + ': ' + nFormatter(customLabels[tooltipItem.index], 1);
                                     }
                                          return data.labels[tooltipItem.index] + ': ' + nFormatter(Number(dataset.data[tooltipItem.index]), 1);
                                }
                            }
                        }
                        
                        if(isHideLabel){
                             chart.options.plugins.datalabels.formatter = function (value, context ) {
                                return "";
                             }
                        } else{
                             chart.options.plugins.datalabels.formatter = function (value, context) {
                                 if(hideLabelDatasetIndex !== null && hideLabelDatasetIndex.length > 0){
                                        if(hideLabelDatasetIndex.includes(context.datasetIndex)){
                                            return "";
                                        }
                                 }
                                 
                                 if (customLabels !== null && customLabels.length > 0){
                                       return customLabels[context.dataIndex];
                                     }
                                // return formatted string here
                                if (value <= 0) return "";
                                return Number(value).toLocaleString();
                           }
                        }
                        chart.update();
                    },
                    
                clearTooltips: function (canvasID){
                        debugger
                        let tooltipEl = document.getElementById('chartjs-tooltip');
                        if(tooltipEl){
                            tooltipEl.remove();
                        }                  
                }
            }

            let clipBoard =  new ClipboardJS('#btnCopyToClipBoard');
            clipBoard.on('success', function(e) {
                let copyButton = $("#btnCopyToClipBoard");
                let copyButtonIcon = $("#btnCopyToClipBoard > i");
                if (copyButton){
                    copyButton.css("background-color","green")
                }
                if (copyButtonIcon){
                        copyButtonIcon.removeClass("fa-save").addClass("fa-check");
                }
                e.clearSelection();
            });
             window.clipboardCopy = {
                // copyText: async function(text) {
                //    new ClipboardJS('.btn');
                // },
                resetButton: function (){
                    let copyButton = $("#btnCopyToClipBoard");
                    let copyButtonIcon = $("#btnCopyToClipBoard > i");
                    if (copyButton){
                                        copyButton.css("background-color","#860404")
                                    }
                    if (copyButtonIcon){
                                            copyButtonIcon.removeClass("fa-check").addClass("fa-save");
                                    }
                }
             };
             window.clipboardCopyReset = {

             }
            
            let dlb3 ;
            function setTitle(title) {
                document.title = title;
            }
            function scrollToBottom(ref) {
                ref.scrollTop = ref.scrollHeight;
            }
           
            function RemoveRowSelected(){
                let elements = document.getElementsByClassName("table-primary");
                while(elements.length > 0){
                    elements[0].classList.remove('table-primary');
                }
            }
            
            function PreventEnterKey(id) {
                $(`#${id}`).keydown(function (event) {
                    if (event.keyCode == 13) {
                        event.preventDefault();
                        return false;
                    }
                });
            }
            function b64ToUint6(nChr) {
              return nChr > 64 && nChr < 91 ? nChr - 65 : nChr > 96 && nChr < 123 ? nChr - 71 : nChr > 47 && nChr < 58 ? nChr + 4 : nChr === 43 ? 62 : nChr === 47 ? 63 : 0;
            }
            
            function base64DecToArr(sBase64, nBlocksSize) {
              var
                sB64Enc = sBase64.replace(/[^A-Za-z0-9\+\/]/g, ""),
                nInLen = sB64Enc.length,
                nOutLen = nBlocksSize ? Math.ceil((nInLen * 3 + 1 >> 2) / nBlocksSize) * nBlocksSize : nInLen * 3 + 1 >> 2,
                taBytes = new Uint8Array(nOutLen);
            
              for (var nMod3, nMod4, nUint24 = 0, nOutIdx = 0, nInIdx = 0; nInIdx < nInLen; nInIdx++) {
                nMod4 = nInIdx & 3;
                nUint24 |= b64ToUint6(sB64Enc.charCodeAt(nInIdx)) << 18 - 6 * nMod4;
                if (nMod4 === 3 || nInLen - nInIdx === 1) {
                  for (nMod3 = 0; nMod3 < 3 && nOutIdx < nOutLen; nMod3++, nOutIdx++) {
                    taBytes[nOutIdx] = nUint24 >>> (16 >>> nMod3 & 24) & 255;
                  }
                  nUint24 = 0;
                }
              }
              return taBytes;
            }
            
            function BlazorDownloadFile(filename, contentType, content) {
                // Blazor marshall byte[] to a base64 string, so we first need to convert the string (content) to a Uint8Array to create the File
                const data = base64DecToArr(content);
            
                // Create the URL
                const file = new File([data], filename, { type: contentType });
                const exportUrl = URL.createObjectURL(file);
            
                // Create the <a> element and click on it
                const a = document.createElement("a");
                document.body.appendChild(a);
                a.href = exportUrl;
                a.download = filename;
                a.target = "_self";
                a.click();
            
                // We don't need to keep the url, let's release the memory
                // On Safari it seems you need to comment this line... (please let me know if you know why)
                URL.revokeObjectURL(exportUrl);
                a.remove();
            }
            
            setTitle = (title) => { document.title = title; };
            
            setInputValue = (id, value) => { 
                var element = document.querySelector(id);
                if (element) {
                    element.value = value;
                }
            };
           
            (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
            (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
            m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
            })(window,document,'script','https://www.google-analytics.com/analytics.js','ga');
    
            ga('create', 'UA-73079289-4', 'auto');
            ga('send', 'pageview');

        </script>

</body>
</html>