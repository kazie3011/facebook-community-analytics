@page "/communities"
@attribute [Authorize(ApiPermissions.Groups.Default)]
@using FacebookCommunityAnalytics.Api.Groups
@using FacebookCommunityAnalytics.Api.Localization
@using Microsoft.Extensions.Localization
@using FacebookCommunityAnalytics.Api.Core.Const
@using FacebookCommunityAnalytics.Api.Core.Enums
@using Volo.Abp.ObjectMapping
@using Volo.Abp.AspNetCore.Components.Messages
@using Volo.Abp.AspNetCore.Components.Web.Theming.Layout
@using FacebookCommunityAnalytics.Api.Permissions
@using FacebookCommunityAnalytics.Api.UserInfos
@using Flurl
@using Radzen
@inject IGroupsAppService GroupsAppService
@inject IUiMessageService UiMessageService
@inject IJSRuntime JSRuntime

@inherits BlazorComponentBase

@* ************************* PAGE HEADER ************************* *@
<PageHeader Title="@L["Groups"]" BreadcrumbItems="BreadcrumbItems" Toolbar="Toolbar">

</PageHeader>

@* ************************* SEARCH ************************* *@
<Card>
    <CardBody>
        <Form id="GroupSearchForm" class="mb-3">
            <Addons>
                <Addon AddonType="AddonType.Body">
                    <TextEdit @bind-Text="@Filter.FilterText"
                              Autofocus="true"
                              Placeholder="@L["Search"]">
                    </TextEdit>
                </Addon>
                <Addon AddonType="AddonType.End">
                    <SubmitButton Form="GroupSearchForm" Clicked="GetGroupsAsync">
                        <Icon Name="IconName.Search" Class="mr-1"></Icon>
                    </SubmitButton>
                </Addon>
            </Addons>
        </Form>
        <Row>
            <Field ColumnSize="ColumnSize.IsFull.OnMobile.Is4.OnTablet">
                <Select TValue="GroupSourceTypeFilter" @bind-SelectedValue="_groupSourceTypeFilter">
                    @foreach (var itemValue in Enum.GetValues(typeof(GroupSourceTypeFilter)))
                    {
                        <SelectItem @key="itemValue" TValue="GroupSourceTypeFilter" Value="@((GroupSourceTypeFilter) itemValue)">
                            @L[$"Enum:GroupSourceTypeFilter:{(int) itemValue}"]
                        </SelectItem>
                    }
                </Select>
            </Field>

            <Field ColumnSize="ColumnSize.IsFull.OnMobile.Is4.OnTablet">
                <Select TValue="GroupOwnershipTypeFilter" @bind-SelectedValue="_groupOwnershipTypeFilter">
                    @foreach (var itemValue in Enum.GetValues(typeof(GroupOwnershipTypeFilter)))
                    {
                        <SelectItem @key="itemValue" TValue="GroupOwnershipTypeFilter" Value="@((GroupOwnershipTypeFilter) itemValue)">
                            @L[$"Enum:GroupOwnershipType:{(int) itemValue}"]
                        </SelectItem>
                    }
                </Select>
            </Field>

            <Field ColumnSize="ColumnSize.IsFull.OnMobile.Is4.OnTablet">
                <Select TValue="bool" @bind-SelectedValue="Filter.IsActive">
                    <SelectItem TValue="bool" Value="true">@L["Active"] - @L["ActiveFilter"]</SelectItem>
                    <SelectItem TValue="bool" Value="false">@L["Inactive"] - @L["InActiveFilter"]</SelectItem>
                </Select>
            </Field>
        </Row>
    </CardBody>
</Card>

@* ************************* DATA GRID ************************* *@
<Card>
<CardBody>
<DataGrid TItem="GroupDto"
          Data="GroupList"
          ReadData="OnDataGridReadAsync"
          TotalItems="TotalCount"
          ShowPager="true"
          Responsive="true"
          Narrow="true"
          Striped="true"
          SortMode="DataGridSortMode.Single"
          PageSizes="GlobalConsts.PAGE_SIZES_CONST" PageSize="PageSize" ShowPageSizes="true">
<DataGridColumns>
    <DataGridEntityActionsColumn TItem="GroupDto" @ref="@EntityActionsColumn">
        <DisplayTemplate>
            <EntityActions TItem="GroupDto" EntityActionsColumn="@EntityActionsColumn">
                <EntityAction TItem="GroupDto"
                              Visible="@CanEditGroup"
                              Clicked="() => OpenEditGroupModal(context)"
                              Text="@L["Edit"]">
                </EntityAction>
                <EntityAction TItem="GroupDto"
                              Visible="@CanDeleteGroup"
                              Clicked="() => DeleteGroupAsync(context)"
                              ConfirmationMessage="@(() => L["DeleteConfirmationMessage"])"
                              Text="@L["Delete"]">
                </EntityAction>
            </EntityActions>
        </DisplayTemplate>
    </DataGridEntityActionsColumn>

    <DataGridColumn TItem="GroupDto"
                    Field="GroupSourceType"
                    Caption="@L["GroupSourceType"]"
                    Sortable="true">
        <DisplayTemplate>
            @L[$"Enum:GroupSourceType:{Convert.ToInt32(context.GroupSourceType)}"]
        </DisplayTemplate>
    </DataGridColumn>

    <DataGridColumn TItem="GroupDto"
                    Field="GroupOwnershipType"
                    Caption="@L["GroupOwnershipType"]"
                    Sortable="true">
        <DisplayTemplate>
            @L[$"Enum:GroupOwnershipType:{Convert.ToInt32(context.GroupOwnershipType)}"]
        </DisplayTemplate>
    </DataGridColumn>

    <DataGridColumn TItem="GroupDto"
                    Field="Title"
                    Caption="@L["GroupTitle"]"
                    Sortable="true"
                    SortDirection="SortDirection.Ascending">
    </DataGridColumn>


    <DataGridColumn TItem="GroupDto"
                    Field="Name"
                    Sortable="false"
                    Caption="@L["GroupName"]">
    </DataGridColumn>

    <DataGridColumn TItem="GroupDto"
                    Field="GroupCategoryType"
                    Caption="@L["GroupCategoryType"]"
                    Sortable="true">
        <DisplayTemplate>
            @context.GroupCategoryType.ToString()
        </DisplayTemplate>
    </DataGridColumn>

    <DataGridColumn TItem="GroupDto"
                    Field="Url"
                    Sortable="false"
                    Caption="@L["Url"]">
        <DisplayTemplate>
            @{
                string GetGroupDisplayUrl(string urlString)
                {
                    try
                    {
                        var url = new Url(urlString);
                        return url.Path;
                    }
                    catch (Exception)
                    {
                        return urlString;
                    }
                }
            }
            <Link To="@context.Url" Target="Target.Blank">@GetGroupDisplayUrl(context.Url)</Link>
        </DisplayTemplate>
    </DataGridColumn>

    <DataGridColumn TItem="GroupDto"
                    Field="CreationTime"
                    Sortable="false"
                    Caption="@L["CreatedAt"]">
    </DataGridColumn>

    <DataGridColumn TItem="GroupDto"
                    Field="Stats.TotalInteractions"
                    Caption="@L["TotalInteractions"]"
                    Sortable="false">
        <DisplayTemplate>
            @(context.Stats?.TotalInteractions != null ? context.Stats.TotalInteractions.ToString("N0") : 0)
        </DisplayTemplate>
    </DataGridColumn>

    <DataGridColumn TItem="GroupDto"
                    Field="Stats.InteractionRate"
                    Caption="@L["InteractionRate"]"
                    Sortable="false">
        <DisplayTemplate>
            @(context.Stats?.InteractionRate != null ? context.Stats.InteractionRate : "-")
        </DisplayTemplate>
    </DataGridColumn>

    <DataGridColumn TItem="GroupDto"
                    Field="Stats.AvgPosts"
                    Caption="@L["AvgPosts"]"
                    Sortable="false">
        <DisplayTemplate>
            @(context.Stats?.AvgPosts != null ? context.Stats.AvgPosts.ToString("N0") : 0)
        </DisplayTemplate>
    </DataGridColumn>

    <DataGridColumn TItem="GroupDto"
                    Field="Stats.GroupMembers"
                    Caption="@L["GroupMembers"]"
                    Sortable="false">
        <DisplayTemplate>
            @(context.Stats?.GroupMembers != null ? context.Stats.GroupMembers.ToString("N0") : 0)
        </DisplayTemplate>
    </DataGridColumn>

    <DataGridColumn TItem="GroupDto"
                    Field="Stats.GrowthPercent"
                    Caption="@L["GrowthPercent"]"
                    Sortable="false">
        <DisplayTemplate>
            @if (context.Stats?.GrowthPercent != null)
            {
                <strong class="@(context.Stats.GrowthPercent < 0 ? "text-danger" : "text-success")">@context.Stats.GrowthPercent %</strong>
            }
            else
            {
                <p>-</p>
            }
        </DisplayTemplate>
    </DataGridColumn>

    <DataGridColumn TItem="GroupDto"
                    Field="Stats.GrowthNumber"
                    Caption="@L["GrowthNumber"]"
                    Sortable="false">
        <DisplayTemplate>
            @if (context.Stats?.GrowthNumber != null)
            {
                <strong class="@(context.Stats.GrowthNumber < 0 ? "text-danger" : "text-success")">@context.Stats.GrowthNumber</strong>
            }
            else
            {
                <p>-</p>
            }
        </DisplayTemplate>
    </DataGridColumn>

    <DataGridColumn TItem="GroupDto"
                    Field="Point"
                    Caption="@L["Point"]"
                    Sortable="true">
        <DisplayTemplate>
            @context.Point
        </DisplayTemplate>
    </DataGridColumn>

    <DataGridColumn TItem="GroupDto"
                    Field="IsActive"
                    Sortable="false"
                    Caption="@L["IsActive"]">
        <DisplayTemplate>
            @if (context.IsActive)
            {
                <Icon Name="IconName.Check" TextColor="TextColor.Success"/>
            }
            else
            {
                <Icon Name="IconName.Ban" TextColor="TextColor.Danger"/>
            }
        </DisplayTemplate>
    </DataGridColumn>

    <DataGridColumn TItem="GroupDto"
                    Field="TikTokTarget.TargetVideo"
                    Caption="@L["Group.TiktokVideoPerMonth"]">
    </DataGridColumn>

    <DataGridColumn TItem="GroupDto"
                    Field="TikTokTarget.TargetFollower"
                    Caption="@L["TiktokChannels.TargetFollowers"]">
    </DataGridColumn>

</DataGridColumns>
</DataGrid>
</CardBody>
</Card>

@* ************************* CREATE MODAL ************************* *@
<Modal @ref="CreateGroupModal">
    <ModalContent Centered="true">
        <Form id="CreateGroupForm">
            <ModalHeader>
                <ModalTitle>@L["NewGroup"]</ModalTitle>
                <CloseButton Clicked="CloseCreateGroupModal"/>
            </ModalHeader>
            <ModalBody>
                <Field>
                    <Addons>
                        <Addon AddonType="AddonType.Start">
                            <AddonLabel Class="bg-primary text-white">@L["GroupTitle"] *</AddonLabel>
                        </Addon>
                        <Addon AddonType="AddonType.Body">
                            <TextEdit @bind-Text="@NewGroup.Title">
                                <Feedback>
                                    <ValidationError/>
                                </Feedback>
                            </TextEdit>
                        </Addon>
                    </Addons>
                </Field>

                <Field>
                    <Addons>
                        <Addon AddonType="AddonType.Start">
                            <AddonLabel Class="bg-primary text-white">@L["Fid"] *</AddonLabel>
                        </Addon>
                        <Addon AddonType="AddonType.Body">
                            <TextEdit @bind-Text="@NewGroup.Fid">
                                <Feedback>
                                    <ValidationError/>
                                </Feedback>
                            </TextEdit>
                        </Addon>
                    </Addons>
                </Field>

                <Field>
                    <Addons>
                        <Addon AddonType="AddonType.Start">
                            <AddonLabel Class="bg-primary text-white">@L["GroupName"] *</AddonLabel>
                        </Addon>
                        <Addon AddonType="AddonType.Body">
                            <TextEdit @bind-Text="@NewGroup.Name">
                                <Feedback>
                                    <ValidationError/>
                                </Feedback>
                            </TextEdit>
                        </Addon>
                    </Addons>
                </Field>

                <Field>
                    <Addons>
                        <Addon AddonType="AddonType.Start">
                            <AddonLabel Class="bg-primary text-white">@L["GroupAltName"]</AddonLabel>
                        </Addon>
                        <Addon AddonType="AddonType.Body">
                            <TextEdit @bind-Text="@NewGroup.AltName">
                                <Feedback>
                                    <ValidationError/>
                                </Feedback>
                            </TextEdit>
                        </Addon>
                    </Addons>
                </Field>

                <Field>
                    <Addons>
                        <Addon AddonType="AddonType.Start">
                            <AddonLabel Class="bg-primary text-white">@L["Description"]</AddonLabel>
                        </Addon>
                        <Addon AddonType="AddonType.Body">
                            <TextEdit @bind-Text="@NewGroup.Description">
                                <Feedback>
                                    <ValidationError/>
                                </Feedback>
                            </TextEdit>
                        </Addon>
                    </Addons>
                </Field>

                <Field>
                    <Addons>
                        <Addon AddonType="AddonType.Start">
                            <AddonLabel Class="bg-primary text-white">@L["Url"] *</AddonLabel>
                        </Addon>
                        <Addon AddonType="AddonType.Body">
                            <TextEdit @bind-Text="@NewGroup.Url">
                                <Feedback>
                                    <ValidationError/>
                                </Feedback>
                            </TextEdit>
                        </Addon>
                    </Addons>
                </Field>

                <Field>
                    <Addons>
                        <Addon AddonType="AddonType.Start">
                            <AddonLabel Class="bg-primary text-white">@L["Point"] *</AddonLabel>
                        </Addon>
                        <Addon AddonType="AddonType.Body">
                            <NumericEdit TValue="double" @bind-Text="@NewGroup.Point">
                                <Feedback>
                                    <ValidationError/>
                                </Feedback>
                            </NumericEdit>
                        </Addon>
                    </Addons>
                </Field>

                <Field>
                    <Addons>
                        <Addon AddonType="AddonType.Start">
                            <AddonLabel Class="bg-primary text-white">@L["GroupCategoryType"] *</AddonLabel>
                        </Addon>
                        <Addon AddonType="AddonType.Body">
                            <Select TValue="GroupCategoryType" @bind-SelectedValue="@NewGroup.GroupCategoryType">
                                @foreach (var itemValue in Enum.GetValues(typeof(GroupCategoryType)))
                                {
                                    <SelectItem @key="itemValue" TValue="GroupCategoryType" Value="@((GroupCategoryType) itemValue)">
                                        @L[$"Enum:GroupCategoryType:{Convert.ToInt32(itemValue)}"]
                                    </SelectItem>
                                }
                            </Select>
                        </Addon>
                    </Addons>
                </Field>

                @* <Field> *@
                @*     <FieldLabel>@L["GroupSourceType"] *</FieldLabel> *@
                @*     <Select TValue="GroupSourceType" @bind-SelectedValue="@NewGroup.GroupSourceType"> *@
                @*         @foreach (var itemValue in Enum.GetValues(typeof(GroupSourceType))) *@
                @*         { *@
                @*             <SelectItem TValue="GroupSourceType" Value="@((GroupSourceType) itemValue)"> *@
                @*                 @L[$"Enum:GroupSourceType:{Convert.ToInt32(itemValue)}"] *@
                @*             </SelectItem> *@
                @*         } *@
                @*     </Select> *@
                @* </Field> *@

                <Field>
                    <Addons>
                        <Addon AddonType="AddonType.Start">
                            <AddonLabel Class="bg-primary text-white">@L["GroupOwnershipType"] *</AddonLabel>
                        </Addon>
                        <Addon AddonType="AddonType.Body">
                            <Select TValue="GroupOwnershipType" @bind-SelectedValue="@NewGroup.GroupOwnershipType">
                                @foreach (var itemValue in Enum.GetValues(typeof(GroupOwnershipType)))
                                {
                                    <SelectItem @key="itemValue" TValue="GroupOwnershipType" Value="@((GroupOwnershipType) itemValue)">
                                        @L[$"Enum:GroupOwnershipType:{Convert.ToInt32(itemValue)}"]
                                    </SelectItem>
                                }
                            </Select>
                        </Addon>
                    </Addons>
                </Field>

                <Field>
                    <Check TValue="bool" @bind-Checked="@NewGroup.IsActive">@L["ActiveFilter"]</Check>
                </Field>

                <Field>
                    <Addons>
                        <Addon AddonType="AddonType.Start">
                            <AddonLabel Class="bg-primary text-white">@L["Moderator"] *</AddonLabel>
                        </Addon>
                        <Addon AddonType="AddonType.Body">
                            <RadzenDropDown AllowClear="true" AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                            @bind-Value=@ModeratorUserIds Multiple="true" Placeholder="@L["Select"]" Data=@StaffUsersLookupDtos TextProperty="DisplayName" ValueProperty="Id"
                                            Change=@(CreateModeratorIdsSelectedValuesChanged) Class="rz-gdl-custom">
                            </RadzenDropDown>

                        </Addon>
                    </Addons>
                </Field>

            </ModalBody>
            <ModalFooter>
                <Button Color="Color.Dark"
                        Clicked="CloseCreateGroupModal">
                    @L["Cancel"]
                </Button>
                <SubmitButton Form="CreateGroupForm" Clicked="CreateGroupAsync"/>
                <h1/>
            </ModalFooter>
        </Form>
    </ModalContent>
</Modal>

@* ************************* EDIT MODAL ************************* *@
<Modal @ref="EditGroupModal">
<ModalContent Centered="true">
<Tabs SelectedTab="@selectedTab" SelectedTabChanged="@OnSelectedTabChanged">
<Items>
    <Tab Name="info">@L["Info"]</Tab>
    <Tab Name="moderator">@L["Moderator"]</Tab>
</Items>
<Content>
<TabPanel Name="info">
    <Form id="EditGroupForm">
        <ModalHeader>
            <ModalTitle>@L["UpdateGroup"]</ModalTitle>
            <CloseButton Clicked="CloseEditGroupModal"/>
        </ModalHeader>
        <ModalBody>
            <Field>
                <Addons>
                    <Addon AddonType="AddonType.Start">
                        <AddonLabel Class="bg-primary text-white">@L["GroupTitle"] *</AddonLabel>
                    </Addon>
                    <Addon AddonType="AddonType.Body">
                        <TextEdit @bind-Text="@EditingGroup.Title">
                            <Feedback>
                                <ValidationError/>
                            </Feedback>
                        </TextEdit>
                    </Addon>
                </Addons>
            </Field>

            <Field>
                <Addons>
                    <Addon AddonType="AddonType.Start">
                        <AddonLabel Class="bg-primary text-white">@L["Fid"] *</AddonLabel>
                    </Addon>
                    <Addon AddonType="AddonType.Body">
                        <TextEdit @bind-Text="@EditingGroup.Fid">
                            <Feedback>
                                <ValidationError/>
                            </Feedback>
                        </TextEdit>
                    </Addon>
                </Addons>
            </Field>

            <Field>
                <Addons>
                    <Addon AddonType="AddonType.Start">
                        <AddonLabel Class="bg-primary text-white">@L["GroupName"] *</AddonLabel>
                    </Addon>
                    <Addon AddonType="AddonType.Body">
                        <TextEdit @bind-Text="@EditingGroup.Name">
                            <Feedback>
                                <ValidationError/>
                            </Feedback>
                        </TextEdit>
                    </Addon>
                </Addons>
            </Field>

            <Field>
                <Addons>
                    <Addon AddonType="AddonType.Start">
                        <AddonLabel Class="bg-primary text-white">@L["GroupAltName"]</AddonLabel>
                    </Addon>
                    <Addon AddonType="AddonType.Body">
                        <TextEdit @bind-Text="@EditingGroup.AltName">
                            <Feedback>
                                <ValidationError/>
                            </Feedback>
                        </TextEdit>
                    </Addon>
                </Addons>
            </Field>

            <Field>
                <Addons>
                    <Addon AddonType="AddonType.Start">
                        <AddonLabel Class="bg-primary text-white">@L["Url"] *</AddonLabel>
                    </Addon>
                    <Addon AddonType="AddonType.Body">
                        <TextEdit @bind-Text="@EditingGroup.Url">
                            <Feedback>
                                <ValidationError/>
                            </Feedback>
                        </TextEdit>
                    </Addon>
                </Addons>
            </Field>

            <Field>
                <Addons>
                    <Addon AddonType="AddonType.Start">
                        <AddonLabel Class="bg-primary text-white">@L["Description"]</AddonLabel>
                    </Addon>
                    <Addon AddonType="AddonType.Body">
                        <TextEdit @bind-Text="@EditingGroup.Description">
                            <Feedback>
                                <ValidationError/>
                            </Feedback>
                        </TextEdit>
                    </Addon>
                </Addons>
            </Field>

            <Field>
                <Addons>
                    <Addon AddonType="AddonType.Start">
                        <AddonLabel Class="bg-primary text-white">@L["Point"] *</AddonLabel>
                    </Addon>
                    <Addon AddonType="AddonType.Body">
                        <NumericEdit TValue="double" @bind-Value="@EditingGroup.Point">
                            <Feedback>
                                <ValidationError/>
                            </Feedback>
                        </NumericEdit>
                    </Addon>
                </Addons>
            </Field>

            <Field>
                <Addons>
                    <Addon AddonType="AddonType.Start">
                        <AddonLabel Class="bg-primary text-white">@L["GroupCategoryType"] *</AddonLabel>
                    </Addon>
                    <Addon AddonType="AddonType.Body">
                        <Select TValue="GroupCategoryType" @bind-SelectedValue="@EditingGroup.GroupCategoryType">
                            @foreach (var itemValue in Enum.GetValues(typeof(GroupCategoryType)))
                            {
                                <SelectItem @key="itemValue" TValue="GroupCategoryType" Value="@((GroupCategoryType) itemValue)">
                                    @L[$"Enum:GroupCategoryType:{Convert.ToInt32(itemValue)}"]
                                </SelectItem>
                            }
                        </Select>
                    </Addon>
                </Addons>
            </Field>

            @* <Field> *@
            @*     <FieldLabel>@L["GroupSourceType"] *</FieldLabel> *@
            @*     <Select TValue="GroupSourceType" @bind-SelectedValue="@EditingGroup.GroupSourceType"> *@
            @*         @foreach (var itemValue in Enum.GetValues(typeof(GroupSourceType))) *@
            @*         { *@
            @*             <SelectItem TValue="GroupSourceType" Value="@((GroupSourceType) itemValue)"> *@
            @*                 @L[$"Enum:GroupSourceType:{Convert.ToInt32(itemValue)}"] *@
            @*             </SelectItem> *@
            @*         } *@
            @*     </Select> *@
            @* </Field> *@

            <Field>
                <Addons>
                    <Addon AddonType="AddonType.Start">
                        <AddonLabel Class="bg-primary text-white">@L["GroupOwnershipType"] *</AddonLabel>
                    </Addon>
                    <Addon AddonType="AddonType.Body">
                        <Select TValue="GroupOwnershipType" @bind-SelectedValue="@EditingGroup.GroupOwnershipType">
                            @foreach (var itemValue in Enum.GetValues(typeof(GroupOwnershipType)))
                            {
                                <SelectItem @key="itemValue" TValue="GroupOwnershipType" Value="@((GroupOwnershipType) itemValue)">
                                    @L[$"Enum:GroupOwnershipType:{Convert.ToInt32(itemValue)}"]
                                </SelectItem>
                            }
                        </Select>
                    </Addon>
                </Addons>
            </Field>

            @if (EditingGroup.GroupSourceType == GroupSourceType.Tiktok)
            {
                <Field>
                    <Addons>
                        <Addon AddonType="AddonType.Start">
                            <AddonLabel Class="bg-primary text-white">@L["Group.TiktokVideoPerMonth"]</AddonLabel>
                        </Addon>
                        <Addon AddonType="AddonType.Body">
                            <NumericEdit TValue="long?" @bind-Value="@EditingGroup.TikTokTarget.TargetVideo">
                            </NumericEdit>
                        </Addon>
                    </Addons>
                </Field>

                <Field>
                    <Addons>
                        <Addon AddonType="AddonType.Start">
                            <AddonLabel Class="bg-primary text-white">@L["TiktokChannels.TargetFollowers"]</AddonLabel>
                        </Addon>
                        <Addon AddonType="AddonType.Body">
                            <NumericEdit TValue="long?" @bind-Value="@EditingGroup.TikTokTarget.TargetFollower">
                            </NumericEdit>
                        </Addon>
                    </Addons>
                </Field>
                
                <Field>
                    <Addons>
                        <Addon AddonType="AddonType.Start">
                            <AddonLabel Class="bg-primary text-white" style="width: 135px">@L["TikTokUserId"]</AddonLabel>
                        </Addon>
                        <Addon AddonType="AddonType.Body">
                            <TextEdit @bind-Text="@EditingGroup.TikTokUserId">
                                <Feedback>
                                    <ValidationError/>
                                </Feedback>
                            </TextEdit>
                        </Addon>
                    </Addons>
                </Field>
            }

            <Field>
                <Check TValue="bool" @bind-Checked="@EditingGroup.IsActive">@L["ActiveFilter"]</Check>
            </Field>

        </ModalBody>
        <ModalFooter>
            <Button Color="Color.Dark"
                    Clicked="CloseEditGroupModal">
                @L["Cancel"]
            </Button>
            <SubmitButton Form="EditGroupForm" Clicked="UpdateGroupAsync"/>
            <h1/>
        </ModalFooter>
    </Form>
</TabPanel>
<TabPanel Name="moderator">
    <Field>
        <h3>@L["moderator"] *</h3>
        <RadzenDropDown AllowClear="true" AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                        @bind-Value=@ModeratorUserIds Multiple="true" Placeholder="@L["select"]" Data=@StaffUsersLookupDtos TextProperty="DisplayName" ValueProperty="Id"
                        Change=@(EditModeratorIdsSelectedValuesChanged) Style="width:100%"/>
        <Button Color="Color.Primary"
                Style="position: absolute;margin-left:-60px;bottom: 5px"
                Clicked="UpdateGroupAsync">
            @L["save"]
        </Button>
    </Field>
</TabPanel>
</Content>
</Tabs>
</ModalContent>
</Modal>